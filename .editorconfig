# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

# All files
[*]
end_of_line = lf
insert_final_newline = true
charset = utf-8
trim_trailing_whitespace = true

# C# files
[*.cs]
# Prefer 'is null' and 'is not null' over '== null' and '!= null'
csharp_style_prefer_null_check_over_type_check = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion

# var preferences
csharp_style_var_for_built_in_types = false:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:suggestion

# Expression-bodied members
csharp_style_expression_bodied_methods = false:suggestion
csharp_style_expression_bodied_constructors = false:suggestion
csharp_style_expression_bodied_operators = false:suggestion
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = false:suggestion

# Pattern matching preferences
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion
csharp_style_prefer_pattern_matching = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion

# Null-checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:suggestion

# Code-block preferences
csharp_prefer_braces = true:warning
csharp_prefer_simple_using_statement = true:suggestion

# Expression-level preferences
csharp_prefer_simple_using_statement = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion

# C# formatting rules
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = flush_left
csharp_indent_block_contents = true
csharp_indent_braces = false

# Space preferences
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false

# Wrapping preferences
csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

# Using directive preferences
csharp_using_directive_placement = outside_namespace:suggestion
dotnet_sort_system_directives_first = true

# Naming conventions

# Constants
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

# Static readonly fields
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.symbols = static_readonly_fields
dotnet_naming_rule.static_readonly_fields_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.static_readonly_fields.required_modifiers = static, readonly

# Private fields
dotnet_naming_rule.private_fields_should_be_camel_case_with_underscore.severity = suggestion
dotnet_naming_rule.private_fields_should_be_camel_case_with_underscore.symbols = private_fields
dotnet_naming_rule.private_fields_should_be_camel_case_with_underscore.style = camel_case_underscore_style

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.accessibility = private

# Public members
dotnet_naming_rule.public_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.public_members_should_be_pascal_case.symbols = public_members
dotnet_naming_rule.public_members_should_be_pascal_case.style = pascal_case_style

dotnet_naming_symbols.public_members.applicable_kinds = property, method, field, event, delegate, class, struct, interface, enum
dotnet_naming_symbols.public_members.accessibility = public, protected, internal, protected_internal, private_protected

# Interfaces
dotnet_naming_rule.interfaces_should_be_prefixed_with_i.severity = suggestion
dotnet_naming_rule.interfaces_should_be_prefixed_with_i.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_prefixed_with_i.style = interface_style

dotnet_naming_symbols.interfaces.applicable_kinds = interface

# Type parameters
dotnet_naming_rule.type_parameters_should_be_prefixed_with_t.severity = suggestion
dotnet_naming_rule.type_parameters_should_be_prefixed_with_t.symbols = type_parameters
dotnet_naming_rule.type_parameters_should_be_prefixed_with_t.style = type_parameter_style

dotnet_naming_symbols.type_parameters.applicable_kinds = type_parameter

# Local variables and parameters
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style

dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local

# Naming styles
dotnet_naming_style.pascal_case_style.capitalization = pascal_case

dotnet_naming_style.camel_case_style.capitalization = camel_case

dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case
dotnet_naming_style.camel_case_underscore_style.required_prefix = _

dotnet_naming_style.interface_style.capitalization = pascal_case
dotnet_naming_style.interface_style.required_prefix = I

dotnet_naming_style.type_parameter_style.capitalization = pascal_case
dotnet_naming_style.type_parameter_style.required_prefix = T

# .NET diagnostic rules

# CA1001: Types that own disposable fields should be disposable
dotnet_diagnostic.CA1001.severity = warning

# CA1009: Declare event handlers correctly
dotnet_diagnostic.CA1009.severity = warning

# CA1016: Mark assemblies with assembly version
dotnet_diagnostic.CA1016.severity = warning

# CA1033: Interface methods should be callable by child types
dotnet_diagnostic.CA1033.severity = warning

# CA1049: Types that own native resources should be disposable
dotnet_diagnostic.CA1049.severity = warning

# CA1060: Move pinvokes to native methods class
dotnet_diagnostic.CA1060.severity = warning

# CA1061: Do not hide base class methods
dotnet_diagnostic.CA1061.severity = warning

# CA1063: Implement IDisposable Correctly
dotnet_diagnostic.CA1063.severity = warning

# CA1065: Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = warning

# CA1301: Avoid duplicate accelerators
dotnet_diagnostic.CA1301.severity = warning

# CA1400: P/Invoke entry points should exist
dotnet_diagnostic.CA1400.severity = warning

# CA1401: P/Invokes should not be visible
dotnet_diagnostic.CA1401.severity = warning

# CA1403: Auto layout types should not be COM visible
dotnet_diagnostic.CA1403.severity = warning

# CA1404: Call GetLastError immediately after P/Invoke
dotnet_diagnostic.CA1404.severity = warning

# CA1405: COM visible type base types should be COM visible
dotnet_diagnostic.CA1405.severity = warning

# CA1410: COM registration methods should be matched
dotnet_diagnostic.CA1410.severity = warning

# CA1415: Declare P/Invokes correctly
dotnet_diagnostic.CA1415.severity = warning

# CA1821: Remove empty Finalizers
dotnet_diagnostic.CA1821.severity = warning

# CA1900: Value type fields should be portable
dotnet_diagnostic.CA1900.severity = warning

# CA1901: P/Invoke declarations should be portable
dotnet_diagnostic.CA1901.severity = warning

# CA2002: Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = warning

# CA2100: Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2100.severity = warning

# CA2101: Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2101.severity = warning

# CA2108: Review declarative security on value types
dotnet_diagnostic.CA2108.severity = warning

# CA2111: Pointers should not be visible
dotnet_diagnostic.CA2111.severity = warning

# CA2112: Secured types should not expose fields
dotnet_diagnostic.CA2112.severity = warning

# CA2114: Method security should be a superset of type
dotnet_diagnostic.CA2114.severity = warning

# CA2116: APTCA methods should only call APTCA methods
dotnet_diagnostic.CA2116.severity = warning

# CA2117: APTCA types should only extend APTCA base types
dotnet_diagnostic.CA2117.severity = warning

# CA2122: Do not indirectly expose methods with link demands
dotnet_diagnostic.CA2122.severity = warning

# CA2123: Override link demands should be identical to base
dotnet_diagnostic.CA2123.severity = warning

# CA2124: Wrap vulnerable finally clauses in outer try
dotnet_diagnostic.CA2124.severity = warning

# CA2126: Type link demands require inheritance demands
dotnet_diagnostic.CA2126.severity = warning

# CA2131: Security critical types may not participate in type equivalence
dotnet_diagnostic.CA2131.severity = warning

# CA2132: Default constructors must be at least as critical as base type default constructors
dotnet_diagnostic.CA2132.severity = warning

# CA2133: Arrays must have elements with consistent transparency
dotnet_diagnostic.CA2133.severity = warning

# CA2134: Methods must keep consistent transparency when overriding base methods
dotnet_diagnostic.CA2134.severity = warning

# CA2137: Transparent methods must contain only verifiable IL
dotnet_diagnostic.CA2137.severity = warning

# CA2138: Transparent methods must not call methods with the SuppressUnmanagedCodeSecurity attribute
dotnet_diagnostic.CA2138.severity = warning

# CA2140: Transparent code must not reference security critical items
dotnet_diagnostic.CA2140.severity = warning

# CA2141: Transparent methods must not satisfy LinkDemands
dotnet_diagnostic.CA2141.severity = warning

# CA2146: Types must be at least as critical as their base types and interfaces
dotnet_diagnostic.CA2146.severity = warning

# CA2147: Transparent methods may not use security asserts
dotnet_diagnostic.CA2147.severity = warning

# CA2149: Transparent methods must not call into native code
dotnet_diagnostic.CA2149.severity = warning

# CA2200: Rethrow to preserve stack details
dotnet_diagnostic.CA2200.severity = warning

# CA2202: Do not dispose objects multiple times
dotnet_diagnostic.CA2202.severity = warning

# CA2207: Initialize value type static fields inline
dotnet_diagnostic.CA2207.severity = warning

# CA2212: Do not mark serviced components with WebMethod
dotnet_diagnostic.CA2212.severity = warning

# CA2213: Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = warning

# CA2214: Do not call overridable methods in constructors
dotnet_diagnostic.CA2214.severity = warning

# CA2216: Disposable types should declare finalizer
dotnet_diagnostic.CA2216.severity = warning

# CA2220: Finalizers should call base class finalizer
dotnet_diagnostic.CA2220.severity = warning

# CA2229: Implement serialization constructors
dotnet_diagnostic.CA2229.severity = warning

# CA2231: Overload operator equals on overriding value type Equals
dotnet_diagnostic.CA2231.severity = warning

# CA2232: Mark Windows Forms entry points with STAThread
dotnet_diagnostic.CA2232.severity = warning

# CA2235: Mark all non-serializable fields
dotnet_diagnostic.CA2235.severity = warning

# CA2236: Call base class methods on ISerializable types
dotnet_diagnostic.CA2236.severity = warning

# CA2237: Mark ISerializable types with serializable
dotnet_diagnostic.CA2237.severity = warning

# CA2238: Implement serialization methods correctly
dotnet_diagnostic.CA2238.severity = warning

# CA2240: Implement ISerializable correctly
dotnet_diagnostic.CA2240.severity = warning

# CA2241: Provide correct arguments to formatting methods
dotnet_diagnostic.CA2241.severity = warning

# CA2242: Test for NaN correctly
dotnet_diagnostic.CA2242.severity = warning

# Memory optimization rules - prefer 'is null' and 'is not null'
# IDE0041: Use 'is null' check
dotnet_diagnostic.IDE0041.severity = warning

# IDE0150: Prefer 'null' check over type check
dotnet_diagnostic.IDE0150.severity = warning

# Performance rules
dotnet_diagnostic.CA1802.severity = warning # Use literals where appropriate
dotnet_diagnostic.CA1805.severity = warning # Do not initialize unnecessarily
dotnet_diagnostic.CA1810.severity = warning # Initialize reference type static fields inline
dotnet_diagnostic.CA1812.severity = warning # Avoid uninstantiated internal classes
dotnet_diagnostic.CA1813.severity = warning # Avoid unsealed attributes
dotnet_diagnostic.CA1814.severity = warning # Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1815.severity = warning # Override equals and operator equals on value types
dotnet_diagnostic.CA1819.severity = warning # Properties should not return arrays
dotnet_diagnostic.CA1820.severity = warning # Test for empty strings using string length
dotnet_diagnostic.CA1822.severity = suggestion # Mark members as static
dotnet_diagnostic.CA1823.severity = warning # Avoid unused private fields
dotnet_diagnostic.CA1824.severity = warning # Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1825.severity = warning # Avoid zero-length array allocations
